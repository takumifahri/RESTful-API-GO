// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/takumifahri/RESTful-API-GO/internal/models"
)

// MockCatalogRepository is a mock of Repository interface.
type MockCatalogRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCatalogRepositoryMockRecorder
}

// MockCatalogRepositoryMockRecorder is the mock recorder for MockCatalogRepository.
type MockCatalogRepositoryMockRecorder struct {
	mock *MockCatalogRepository
}

// NewMockCatalogRepository creates a new mock instance.
func NewMockCatalogRepository(ctrl *gomock.Controller) *MockCatalogRepository {
	mock := &MockCatalogRepository{ctrl: ctrl}
	mock.recorder = &MockCatalogRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCatalogRepository) EXPECT() *MockCatalogRepositoryMockRecorder {
	return m.recorder
}

// CreateCatalog mocks base method.
func (m *MockCatalogRepository) CreateCatalog(ctx context.Context, catalog models.ProductClothes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCatalog", ctx, catalog)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCatalog indicates an expected call of CreateCatalog.
func (mr *MockCatalogRepositoryMockRecorder) CreateCatalog(ctx, catalog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCatalog", reflect.TypeOf((*MockCatalogRepository)(nil).CreateCatalog), ctx, catalog)
}

// GetAllCatalog mocks base method.
func (m *MockCatalogRepository) GetAllCatalog(ctx context.Context, orderCode string) (models.ProductClothes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCatalog", ctx, orderCode)
	ret0, _ := ret[0].(models.ProductClothes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCatalog indicates an expected call of GetAllCatalog.
func (mr *MockCatalogRepositoryMockRecorder) GetAllCatalog(ctx, orderCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCatalog", reflect.TypeOf((*MockCatalogRepository)(nil).GetAllCatalog), ctx, orderCode)
}

// GetAllCatalogList mocks base method.
func (m *MockCatalogRepository) GetAllCatalogList(ctx context.Context, tipe string) ([]models.ProductClothes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCatalogList", ctx, tipe)
	ret0, _ := ret[0].([]models.ProductClothes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCatalogList indicates an expected call of GetAllCatalogList.
func (mr *MockCatalogRepositoryMockRecorder) GetAllCatalogList(ctx, tipe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCatalogList", reflect.TypeOf((*MockCatalogRepository)(nil).GetAllCatalogList), ctx, tipe)
}

// GetCatalogByID mocks base method.
func (m *MockCatalogRepository) GetCatalogByID(ctx context.Context, UNIQUEID string) (*models.ProductClothes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCatalogByID", ctx, UNIQUEID)
	ret0, _ := ret[0].(*models.ProductClothes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogByID indicates an expected call of GetCatalogByID.
func (mr *MockCatalogRepositoryMockRecorder) GetCatalogByID(ctx, UNIQUEID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogByID", reflect.TypeOf((*MockCatalogRepository)(nil).GetCatalogByID), ctx, UNIQUEID)
}

// UpdateCatalog mocks base method.
func (m *MockCatalogRepository) UpdateCatalog(ctx context.Context, uniqueID string, updateData map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCatalog", ctx, uniqueID, updateData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCatalog indicates an expected call of UpdateCatalog.
func (mr *MockCatalogRepositoryMockRecorder) UpdateCatalog(ctx, uniqueID, updateData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCatalog", reflect.TypeOf((*MockCatalogRepository)(nil).UpdateCatalog), ctx, uniqueID, updateData)
}
