// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/takumifahri/RESTful-API-GO/internal/models"
)

// MockAuthRepository is a mock of Repository interface.
type MockAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepositoryMockRecorder
}

// MockAuthRepositoryMockRecorder is the mock recorder for MockAuthRepository.
type MockAuthRepositoryMockRecorder struct {
	mock *MockAuthRepository
}

// NewMockAuthRepository creates a new mock instance.
func NewMockAuthRepository(ctrl *gomock.Controller) *MockAuthRepository {
	mock := &MockAuthRepository{ctrl: ctrl}
	mock.recorder = &MockAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepository) EXPECT() *MockAuthRepositoryMockRecorder {
	return m.recorder
}

// CheckRegistered mocks base method.
func (m *MockAuthRepository) CheckRegistered(ctx context.Context, Email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRegistered", ctx, Email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRegistered indicates an expected call of CheckRegistered.
func (mr *MockAuthRepositoryMockRecorder) CheckRegistered(ctx, Email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRegistered", reflect.TypeOf((*MockAuthRepository)(nil).CheckRegistered), ctx, Email)
}

// CheckSession mocks base method.
func (m *MockAuthRepository) CheckSession(ctx context.Context, data models.UserSession) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSession", ctx, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSession indicates an expected call of CheckSession.
func (mr *MockAuthRepositoryMockRecorder) CheckSession(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSession", reflect.TypeOf((*MockAuthRepository)(nil).CheckSession), ctx, data)
}

// CreateUserSession mocks base method.
func (m *MockAuthRepository) CreateUserSession(ctx context.Context, userUniqueID string) (models.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserSession", ctx, userUniqueID)
	ret0, _ := ret[0].(models.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserSession indicates an expected call of CreateUserSession.
func (mr *MockAuthRepositoryMockRecorder) CreateUserSession(ctx, userUniqueID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserSession", reflect.TypeOf((*MockAuthRepository)(nil).CreateUserSession), ctx, userUniqueID)
}

// GenerateUserHash mocks base method.
func (m *MockAuthRepository) GenerateUserHash(ctx context.Context, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUserHash", ctx, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateUserHash indicates an expected call of GenerateUserHash.
func (mr *MockAuthRepositoryMockRecorder) GenerateUserHash(ctx, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUserHash", reflect.TypeOf((*MockAuthRepository)(nil).GenerateUserHash), ctx, password)
}

// GetMe mocks base method.
func (m *MockAuthRepository) GetMe(ctx context.Context, Email string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMe", ctx, Email)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMe indicates an expected call of GetMe.
func (mr *MockAuthRepositoryMockRecorder) GetMe(ctx, Email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMe", reflect.TypeOf((*MockAuthRepository)(nil).GetMe), ctx, Email)
}

// RegisterUser mocks base method.
func (m *MockAuthRepository) RegisterUser(ctx context.Context, userData models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, userData)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockAuthRepositoryMockRecorder) RegisterUser(ctx, userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockAuthRepository)(nil).RegisterUser), ctx, userData)
}

// VerifyUserLogin mocks base method.
func (m *MockAuthRepository) VerifyUserLogin(ctx context.Context, Email, Password string, userData models.User) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUserLogin", ctx, Email, Password, userData)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUserLogin indicates an expected call of VerifyUserLogin.
func (mr *MockAuthRepositoryMockRecorder) VerifyUserLogin(ctx, Email, Password, userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserLogin", reflect.TypeOf((*MockAuthRepository)(nil).VerifyUserLogin), ctx, Email, Password, userData)
}
