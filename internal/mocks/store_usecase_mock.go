// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/store/usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/takumifahri/RESTful-API-GO/internal/models"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// AddCatalog mocks base method.
func (m *MockUsecase) AddCatalog(ctx context.Context, catalog models.ProductClothes) (models.ProductClothes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCatalog", ctx, catalog)
	ret0, _ := ret[0].(models.ProductClothes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCatalog indicates an expected call of AddCatalog.
func (mr *MockUsecaseMockRecorder) AddCatalog(ctx, catalog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCatalog", reflect.TypeOf((*MockUsecase)(nil).AddCatalog), ctx, catalog)
}

// AdminGetAllOrder mocks base method.
func (m *MockUsecase) AdminGetAllOrder(ctx context.Context) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminGetAllOrder", ctx)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminGetAllOrder indicates an expected call of AdminGetAllOrder.
func (mr *MockUsecaseMockRecorder) AdminGetAllOrder(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminGetAllOrder", reflect.TypeOf((*MockUsecase)(nil).AdminGetAllOrder), ctx)
}

// GetAllCatalogList mocks base method.
func (m *MockUsecase) GetAllCatalogList(ctx context.Context, tipe string) ([]models.ProductClothes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCatalogList", ctx, tipe)
	ret0, _ := ret[0].([]models.ProductClothes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCatalogList indicates an expected call of GetAllCatalogList.
func (mr *MockUsecaseMockRecorder) GetAllCatalogList(ctx, tipe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCatalogList", reflect.TypeOf((*MockUsecase)(nil).GetAllCatalogList), ctx, tipe)
}

// GetCatalogByID mocks base method.
func (m *MockUsecase) GetCatalogByID(ctx context.Context, UNIQUEID string) (*models.ProductClothes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCatalogByID", ctx, UNIQUEID)
	ret0, _ := ret[0].(*models.ProductClothes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogByID indicates an expected call of GetCatalogByID.
func (mr *MockUsecaseMockRecorder) GetCatalogByID(ctx, UNIQUEID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogByID", reflect.TypeOf((*MockUsecase)(nil).GetCatalogByID), ctx, UNIQUEID)
}

// GetOrderInfo mocks base method.
func (m *MockUsecase) GetOrderInfo(ctx context.Context, request models.GetOrderInfoRequest) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderInfo", ctx, request)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderInfo indicates an expected call of GetOrderInfo.
func (mr *MockUsecaseMockRecorder) GetOrderInfo(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderInfo", reflect.TypeOf((*MockUsecase)(nil).GetOrderInfo), ctx, request)
}

// Order mocks base method.
func (m *MockUsecase) Order(ctx context.Context, request models.OrderMenuRequest) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Order", ctx, request)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Order indicates an expected call of Order.
func (mr *MockUsecaseMockRecorder) Order(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockUsecase)(nil).Order), ctx, request)
}

// UpdateCatalog mocks base method.
func (m *MockUsecase) UpdateCatalog(ctx context.Context, catalog models.ProductClothes) (models.ProductClothes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCatalog", ctx, catalog)
	ret0, _ := ret[0].(models.ProductClothes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCatalog indicates an expected call of UpdateCatalog.
func (mr *MockUsecaseMockRecorder) UpdateCatalog(ctx, catalog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCatalog", reflect.TypeOf((*MockUsecase)(nil).UpdateCatalog), ctx, catalog)
}
