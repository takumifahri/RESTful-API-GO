// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/store/usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/takumifahri/RESTful-API-GO/internal/models"
)

// MockStoreUsecase is a mock of Usecase interface.
type MockStoreUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockStoreUsecaseMockRecorder
}

// MockStoreUsecaseMockRecorder is the mock recorder for MockStoreUsecase.
type MockStoreUsecaseMockRecorder struct {
	mock *MockStoreUsecase
}

// NewMockStoreUsecase creates a new mock instance.
func NewMockStoreUsecase(ctrl *gomock.Controller) *MockStoreUsecase {
	mock := &MockStoreUsecase{ctrl: ctrl}
	mock.recorder = &MockStoreUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreUsecase) EXPECT() *MockStoreUsecaseMockRecorder {
	return m.recorder
}

// AddCatalog mocks base method.
func (m *MockStoreUsecase) AddCatalog(ctx context.Context, catalog models.ProductClothes) (models.ProductClothes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCatalog", ctx, catalog)
	ret0, _ := ret[0].(models.ProductClothes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCatalog indicates an expected call of AddCatalog.
func (mr *MockStoreUsecaseMockRecorder) AddCatalog(ctx, catalog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCatalog", reflect.TypeOf((*MockStoreUsecase)(nil).AddCatalog), ctx, catalog)
}

// AdminGetAllOrder mocks base method.
func (m *MockStoreUsecase) AdminGetAllOrder(ctx context.Context) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminGetAllOrder", ctx)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminGetAllOrder indicates an expected call of AdminGetAllOrder.
func (mr *MockStoreUsecaseMockRecorder) AdminGetAllOrder(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminGetAllOrder", reflect.TypeOf((*MockStoreUsecase)(nil).AdminGetAllOrder), ctx)
}

// GetAllCatalogList mocks base method.
func (m *MockStoreUsecase) GetAllCatalogList(ctx context.Context, tipe string) ([]models.ProductClothes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCatalogList", ctx, tipe)
	ret0, _ := ret[0].([]models.ProductClothes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCatalogList indicates an expected call of GetAllCatalogList.
func (mr *MockStoreUsecaseMockRecorder) GetAllCatalogList(ctx, tipe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCatalogList", reflect.TypeOf((*MockStoreUsecase)(nil).GetAllCatalogList), ctx, tipe)
}

// GetCatalogByID mocks base method.
func (m *MockStoreUsecase) GetCatalogByID(ctx context.Context, UNIQUEID string) (*models.ProductClothes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCatalogByID", ctx, UNIQUEID)
	ret0, _ := ret[0].(*models.ProductClothes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogByID indicates an expected call of GetCatalogByID.
func (mr *MockStoreUsecaseMockRecorder) GetCatalogByID(ctx, UNIQUEID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogByID", reflect.TypeOf((*MockStoreUsecase)(nil).GetCatalogByID), ctx, UNIQUEID)
}

// GetOrderInfo mocks base method.
func (m *MockStoreUsecase) GetOrderInfo(ctx context.Context, request models.GetOrderInfoRequest) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderInfo", ctx, request)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderInfo indicates an expected call of GetOrderInfo.
func (mr *MockStoreUsecaseMockRecorder) GetOrderInfo(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderInfo", reflect.TypeOf((*MockStoreUsecase)(nil).GetOrderInfo), ctx, request)
}

// Order mocks base method.
func (m *MockStoreUsecase) Order(ctx context.Context, request models.OrderMenuRequest) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Order", ctx, request)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Order indicates an expected call of Order.
func (mr *MockStoreUsecaseMockRecorder) Order(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockStoreUsecase)(nil).Order), ctx, request)
}

// UpdateCatalog mocks base method.
func (m *MockStoreUsecase) UpdateCatalog(ctx context.Context, catalog models.ProductClothes) (models.ProductClothes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCatalog", ctx, catalog)
	ret0, _ := ret[0].(models.ProductClothes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCatalog indicates an expected call of UpdateCatalog.
func (mr *MockStoreUsecaseMockRecorder) UpdateCatalog(ctx, catalog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCatalog", reflect.TypeOf((*MockStoreUsecase)(nil).UpdateCatalog), ctx, catalog)
}
